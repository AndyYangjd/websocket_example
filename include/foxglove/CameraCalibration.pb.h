// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: foxglove/CameraCalibration.proto

#ifndef PROTOBUF_INCLUDED_foxglove_2fCameraCalibration_2eproto
#define PROTOBUF_INCLUDED_foxglove_2fCameraCalibration_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/timestamp.pb.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_foxglove_2fCameraCalibration_2eproto 

namespace protobuf_foxglove_2fCameraCalibration_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[1];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_foxglove_2fCameraCalibration_2eproto
namespace foxglove {
class CameraCalibration;
class CameraCalibrationDefaultTypeInternal;
extern CameraCalibrationDefaultTypeInternal _CameraCalibration_default_instance_;
}  // namespace foxglove
namespace google {
namespace protobuf {
template<> ::foxglove::CameraCalibration* Arena::CreateMaybeMessage<::foxglove::CameraCalibration>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace foxglove {

// ===================================================================

class CameraCalibration : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:foxglove.CameraCalibration) */ {
 public:
  CameraCalibration();
  virtual ~CameraCalibration();

  CameraCalibration(const CameraCalibration& from);

  inline CameraCalibration& operator=(const CameraCalibration& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CameraCalibration(CameraCalibration&& from) noexcept
    : CameraCalibration() {
    *this = ::std::move(from);
  }

  inline CameraCalibration& operator=(CameraCalibration&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CameraCalibration& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CameraCalibration* internal_default_instance() {
    return reinterpret_cast<const CameraCalibration*>(
               &_CameraCalibration_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(CameraCalibration* other);
  friend void swap(CameraCalibration& a, CameraCalibration& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CameraCalibration* New() const final {
    return CreateMaybeMessage<CameraCalibration>(NULL);
  }

  CameraCalibration* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CameraCalibration>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CameraCalibration& from);
  void MergeFrom(const CameraCalibration& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CameraCalibration* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated double D = 5;
  int d_size() const;
  void clear_d();
  static const int kDFieldNumber = 5;
  double d(int index) const;
  void set_d(int index, double value);
  void add_d(double value);
  const ::google::protobuf::RepeatedField< double >&
      d() const;
  ::google::protobuf::RepeatedField< double >*
      mutable_d();

  // repeated double K = 6;
  int k_size() const;
  void clear_k();
  static const int kKFieldNumber = 6;
  double k(int index) const;
  void set_k(int index, double value);
  void add_k(double value);
  const ::google::protobuf::RepeatedField< double >&
      k() const;
  ::google::protobuf::RepeatedField< double >*
      mutable_k();

  // repeated double R = 7;
  int r_size() const;
  void clear_r();
  static const int kRFieldNumber = 7;
  double r(int index) const;
  void set_r(int index, double value);
  void add_r(double value);
  const ::google::protobuf::RepeatedField< double >&
      r() const;
  ::google::protobuf::RepeatedField< double >*
      mutable_r();

  // repeated double P = 8;
  int p_size() const;
  void clear_p();
  static const int kPFieldNumber = 8;
  double p(int index) const;
  void set_p(int index, double value);
  void add_p(double value);
  const ::google::protobuf::RepeatedField< double >&
      p() const;
  ::google::protobuf::RepeatedField< double >*
      mutable_p();

  // string distortion_model = 4;
  void clear_distortion_model();
  static const int kDistortionModelFieldNumber = 4;
  const ::std::string& distortion_model() const;
  void set_distortion_model(const ::std::string& value);
  #if LANG_CXX11
  void set_distortion_model(::std::string&& value);
  #endif
  void set_distortion_model(const char* value);
  void set_distortion_model(const char* value, size_t size);
  ::std::string* mutable_distortion_model();
  ::std::string* release_distortion_model();
  void set_allocated_distortion_model(::std::string* distortion_model);

  // .google.protobuf.Timestamp timestamp = 1;
  bool has_timestamp() const;
  void clear_timestamp();
  static const int kTimestampFieldNumber = 1;
  private:
  const ::google::protobuf::Timestamp& _internal_timestamp() const;
  public:
  const ::google::protobuf::Timestamp& timestamp() const;
  ::google::protobuf::Timestamp* release_timestamp();
  ::google::protobuf::Timestamp* mutable_timestamp();
  void set_allocated_timestamp(::google::protobuf::Timestamp* timestamp);

  // fixed32 width = 2;
  void clear_width();
  static const int kWidthFieldNumber = 2;
  ::google::protobuf::uint32 width() const;
  void set_width(::google::protobuf::uint32 value);

  // fixed32 height = 3;
  void clear_height();
  static const int kHeightFieldNumber = 3;
  ::google::protobuf::uint32 height() const;
  void set_height(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:foxglove.CameraCalibration)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< double > d_;
  mutable int _d_cached_byte_size_;
  ::google::protobuf::RepeatedField< double > k_;
  mutable int _k_cached_byte_size_;
  ::google::protobuf::RepeatedField< double > r_;
  mutable int _r_cached_byte_size_;
  ::google::protobuf::RepeatedField< double > p_;
  mutable int _p_cached_byte_size_;
  ::google::protobuf::internal::ArenaStringPtr distortion_model_;
  ::google::protobuf::Timestamp* timestamp_;
  ::google::protobuf::uint32 width_;
  ::google::protobuf::uint32 height_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_foxglove_2fCameraCalibration_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CameraCalibration

// .google.protobuf.Timestamp timestamp = 1;
inline bool CameraCalibration::has_timestamp() const {
  return this != internal_default_instance() && timestamp_ != NULL;
}
inline const ::google::protobuf::Timestamp& CameraCalibration::_internal_timestamp() const {
  return *timestamp_;
}
inline const ::google::protobuf::Timestamp& CameraCalibration::timestamp() const {
  const ::google::protobuf::Timestamp* p = timestamp_;
  // @@protoc_insertion_point(field_get:foxglove.CameraCalibration.timestamp)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::Timestamp*>(
      &::google::protobuf::_Timestamp_default_instance_);
}
inline ::google::protobuf::Timestamp* CameraCalibration::release_timestamp() {
  // @@protoc_insertion_point(field_release:foxglove.CameraCalibration.timestamp)
  
  ::google::protobuf::Timestamp* temp = timestamp_;
  timestamp_ = NULL;
  return temp;
}
inline ::google::protobuf::Timestamp* CameraCalibration::mutable_timestamp() {
  
  if (timestamp_ == NULL) {
    auto* p = CreateMaybeMessage<::google::protobuf::Timestamp>(GetArenaNoVirtual());
    timestamp_ = p;
  }
  // @@protoc_insertion_point(field_mutable:foxglove.CameraCalibration.timestamp)
  return timestamp_;
}
inline void CameraCalibration::set_allocated_timestamp(::google::protobuf::Timestamp* timestamp) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(timestamp_);
  }
  if (timestamp) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(timestamp)->GetArena();
    if (message_arena != submessage_arena) {
      timestamp = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, timestamp, submessage_arena);
    }
    
  } else {
    
  }
  timestamp_ = timestamp;
  // @@protoc_insertion_point(field_set_allocated:foxglove.CameraCalibration.timestamp)
}

// fixed32 width = 2;
inline void CameraCalibration::clear_width() {
  width_ = 0u;
}
inline ::google::protobuf::uint32 CameraCalibration::width() const {
  // @@protoc_insertion_point(field_get:foxglove.CameraCalibration.width)
  return width_;
}
inline void CameraCalibration::set_width(::google::protobuf::uint32 value) {
  
  width_ = value;
  // @@protoc_insertion_point(field_set:foxglove.CameraCalibration.width)
}

// fixed32 height = 3;
inline void CameraCalibration::clear_height() {
  height_ = 0u;
}
inline ::google::protobuf::uint32 CameraCalibration::height() const {
  // @@protoc_insertion_point(field_get:foxglove.CameraCalibration.height)
  return height_;
}
inline void CameraCalibration::set_height(::google::protobuf::uint32 value) {
  
  height_ = value;
  // @@protoc_insertion_point(field_set:foxglove.CameraCalibration.height)
}

// string distortion_model = 4;
inline void CameraCalibration::clear_distortion_model() {
  distortion_model_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CameraCalibration::distortion_model() const {
  // @@protoc_insertion_point(field_get:foxglove.CameraCalibration.distortion_model)
  return distortion_model_.GetNoArena();
}
inline void CameraCalibration::set_distortion_model(const ::std::string& value) {
  
  distortion_model_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:foxglove.CameraCalibration.distortion_model)
}
#if LANG_CXX11
inline void CameraCalibration::set_distortion_model(::std::string&& value) {
  
  distortion_model_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:foxglove.CameraCalibration.distortion_model)
}
#endif
inline void CameraCalibration::set_distortion_model(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  distortion_model_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:foxglove.CameraCalibration.distortion_model)
}
inline void CameraCalibration::set_distortion_model(const char* value, size_t size) {
  
  distortion_model_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:foxglove.CameraCalibration.distortion_model)
}
inline ::std::string* CameraCalibration::mutable_distortion_model() {
  
  // @@protoc_insertion_point(field_mutable:foxglove.CameraCalibration.distortion_model)
  return distortion_model_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CameraCalibration::release_distortion_model() {
  // @@protoc_insertion_point(field_release:foxglove.CameraCalibration.distortion_model)
  
  return distortion_model_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CameraCalibration::set_allocated_distortion_model(::std::string* distortion_model) {
  if (distortion_model != NULL) {
    
  } else {
    
  }
  distortion_model_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), distortion_model);
  // @@protoc_insertion_point(field_set_allocated:foxglove.CameraCalibration.distortion_model)
}

// repeated double D = 5;
inline int CameraCalibration::d_size() const {
  return d_.size();
}
inline void CameraCalibration::clear_d() {
  d_.Clear();
}
inline double CameraCalibration::d(int index) const {
  // @@protoc_insertion_point(field_get:foxglove.CameraCalibration.D)
  return d_.Get(index);
}
inline void CameraCalibration::set_d(int index, double value) {
  d_.Set(index, value);
  // @@protoc_insertion_point(field_set:foxglove.CameraCalibration.D)
}
inline void CameraCalibration::add_d(double value) {
  d_.Add(value);
  // @@protoc_insertion_point(field_add:foxglove.CameraCalibration.D)
}
inline const ::google::protobuf::RepeatedField< double >&
CameraCalibration::d() const {
  // @@protoc_insertion_point(field_list:foxglove.CameraCalibration.D)
  return d_;
}
inline ::google::protobuf::RepeatedField< double >*
CameraCalibration::mutable_d() {
  // @@protoc_insertion_point(field_mutable_list:foxglove.CameraCalibration.D)
  return &d_;
}

// repeated double K = 6;
inline int CameraCalibration::k_size() const {
  return k_.size();
}
inline void CameraCalibration::clear_k() {
  k_.Clear();
}
inline double CameraCalibration::k(int index) const {
  // @@protoc_insertion_point(field_get:foxglove.CameraCalibration.K)
  return k_.Get(index);
}
inline void CameraCalibration::set_k(int index, double value) {
  k_.Set(index, value);
  // @@protoc_insertion_point(field_set:foxglove.CameraCalibration.K)
}
inline void CameraCalibration::add_k(double value) {
  k_.Add(value);
  // @@protoc_insertion_point(field_add:foxglove.CameraCalibration.K)
}
inline const ::google::protobuf::RepeatedField< double >&
CameraCalibration::k() const {
  // @@protoc_insertion_point(field_list:foxglove.CameraCalibration.K)
  return k_;
}
inline ::google::protobuf::RepeatedField< double >*
CameraCalibration::mutable_k() {
  // @@protoc_insertion_point(field_mutable_list:foxglove.CameraCalibration.K)
  return &k_;
}

// repeated double R = 7;
inline int CameraCalibration::r_size() const {
  return r_.size();
}
inline void CameraCalibration::clear_r() {
  r_.Clear();
}
inline double CameraCalibration::r(int index) const {
  // @@protoc_insertion_point(field_get:foxglove.CameraCalibration.R)
  return r_.Get(index);
}
inline void CameraCalibration::set_r(int index, double value) {
  r_.Set(index, value);
  // @@protoc_insertion_point(field_set:foxglove.CameraCalibration.R)
}
inline void CameraCalibration::add_r(double value) {
  r_.Add(value);
  // @@protoc_insertion_point(field_add:foxglove.CameraCalibration.R)
}
inline const ::google::protobuf::RepeatedField< double >&
CameraCalibration::r() const {
  // @@protoc_insertion_point(field_list:foxglove.CameraCalibration.R)
  return r_;
}
inline ::google::protobuf::RepeatedField< double >*
CameraCalibration::mutable_r() {
  // @@protoc_insertion_point(field_mutable_list:foxglove.CameraCalibration.R)
  return &r_;
}

// repeated double P = 8;
inline int CameraCalibration::p_size() const {
  return p_.size();
}
inline void CameraCalibration::clear_p() {
  p_.Clear();
}
inline double CameraCalibration::p(int index) const {
  // @@protoc_insertion_point(field_get:foxglove.CameraCalibration.P)
  return p_.Get(index);
}
inline void CameraCalibration::set_p(int index, double value) {
  p_.Set(index, value);
  // @@protoc_insertion_point(field_set:foxglove.CameraCalibration.P)
}
inline void CameraCalibration::add_p(double value) {
  p_.Add(value);
  // @@protoc_insertion_point(field_add:foxglove.CameraCalibration.P)
}
inline const ::google::protobuf::RepeatedField< double >&
CameraCalibration::p() const {
  // @@protoc_insertion_point(field_list:foxglove.CameraCalibration.P)
  return p_;
}
inline ::google::protobuf::RepeatedField< double >*
CameraCalibration::mutable_p() {
  // @@protoc_insertion_point(field_mutable_list:foxglove.CameraCalibration.P)
  return &p_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace foxglove

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_foxglove_2fCameraCalibration_2eproto
