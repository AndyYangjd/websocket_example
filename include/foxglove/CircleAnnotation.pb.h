// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: foxglove/CircleAnnotation.proto

#ifndef PROTOBUF_INCLUDED_foxglove_2fCircleAnnotation_2eproto
#define PROTOBUF_INCLUDED_foxglove_2fCircleAnnotation_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "foxglove/Color.pb.h"
#include "foxglove/Point2.pb.h"
#include <google/protobuf/timestamp.pb.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_foxglove_2fCircleAnnotation_2eproto 

namespace protobuf_foxglove_2fCircleAnnotation_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[1];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_foxglove_2fCircleAnnotation_2eproto
namespace foxglove {
class CircleAnnotation;
class CircleAnnotationDefaultTypeInternal;
extern CircleAnnotationDefaultTypeInternal _CircleAnnotation_default_instance_;
}  // namespace foxglove
namespace google {
namespace protobuf {
template<> ::foxglove::CircleAnnotation* Arena::CreateMaybeMessage<::foxglove::CircleAnnotation>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace foxglove {

// ===================================================================

class CircleAnnotation : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:foxglove.CircleAnnotation) */ {
 public:
  CircleAnnotation();
  virtual ~CircleAnnotation();

  CircleAnnotation(const CircleAnnotation& from);

  inline CircleAnnotation& operator=(const CircleAnnotation& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CircleAnnotation(CircleAnnotation&& from) noexcept
    : CircleAnnotation() {
    *this = ::std::move(from);
  }

  inline CircleAnnotation& operator=(CircleAnnotation&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CircleAnnotation& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CircleAnnotation* internal_default_instance() {
    return reinterpret_cast<const CircleAnnotation*>(
               &_CircleAnnotation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(CircleAnnotation* other);
  friend void swap(CircleAnnotation& a, CircleAnnotation& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CircleAnnotation* New() const final {
    return CreateMaybeMessage<CircleAnnotation>(NULL);
  }

  CircleAnnotation* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CircleAnnotation>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CircleAnnotation& from);
  void MergeFrom(const CircleAnnotation& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CircleAnnotation* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.protobuf.Timestamp timestamp = 1;
  bool has_timestamp() const;
  void clear_timestamp();
  static const int kTimestampFieldNumber = 1;
  private:
  const ::google::protobuf::Timestamp& _internal_timestamp() const;
  public:
  const ::google::protobuf::Timestamp& timestamp() const;
  ::google::protobuf::Timestamp* release_timestamp();
  ::google::protobuf::Timestamp* mutable_timestamp();
  void set_allocated_timestamp(::google::protobuf::Timestamp* timestamp);

  // .foxglove.Point2 position = 2;
  bool has_position() const;
  void clear_position();
  static const int kPositionFieldNumber = 2;
  private:
  const ::foxglove::Point2& _internal_position() const;
  public:
  const ::foxglove::Point2& position() const;
  ::foxglove::Point2* release_position();
  ::foxglove::Point2* mutable_position();
  void set_allocated_position(::foxglove::Point2* position);

  // .foxglove.Color fill_color = 5;
  bool has_fill_color() const;
  void clear_fill_color();
  static const int kFillColorFieldNumber = 5;
  private:
  const ::foxglove::Color& _internal_fill_color() const;
  public:
  const ::foxglove::Color& fill_color() const;
  ::foxglove::Color* release_fill_color();
  ::foxglove::Color* mutable_fill_color();
  void set_allocated_fill_color(::foxglove::Color* fill_color);

  // .foxglove.Color outline_color = 6;
  bool has_outline_color() const;
  void clear_outline_color();
  static const int kOutlineColorFieldNumber = 6;
  private:
  const ::foxglove::Color& _internal_outline_color() const;
  public:
  const ::foxglove::Color& outline_color() const;
  ::foxglove::Color* release_outline_color();
  ::foxglove::Color* mutable_outline_color();
  void set_allocated_outline_color(::foxglove::Color* outline_color);

  // double diameter = 3;
  void clear_diameter();
  static const int kDiameterFieldNumber = 3;
  double diameter() const;
  void set_diameter(double value);

  // double thickness = 4;
  void clear_thickness();
  static const int kThicknessFieldNumber = 4;
  double thickness() const;
  void set_thickness(double value);

  // @@protoc_insertion_point(class_scope:foxglove.CircleAnnotation)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::Timestamp* timestamp_;
  ::foxglove::Point2* position_;
  ::foxglove::Color* fill_color_;
  ::foxglove::Color* outline_color_;
  double diameter_;
  double thickness_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_foxglove_2fCircleAnnotation_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CircleAnnotation

// .google.protobuf.Timestamp timestamp = 1;
inline bool CircleAnnotation::has_timestamp() const {
  return this != internal_default_instance() && timestamp_ != NULL;
}
inline const ::google::protobuf::Timestamp& CircleAnnotation::_internal_timestamp() const {
  return *timestamp_;
}
inline const ::google::protobuf::Timestamp& CircleAnnotation::timestamp() const {
  const ::google::protobuf::Timestamp* p = timestamp_;
  // @@protoc_insertion_point(field_get:foxglove.CircleAnnotation.timestamp)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::Timestamp*>(
      &::google::protobuf::_Timestamp_default_instance_);
}
inline ::google::protobuf::Timestamp* CircleAnnotation::release_timestamp() {
  // @@protoc_insertion_point(field_release:foxglove.CircleAnnotation.timestamp)
  
  ::google::protobuf::Timestamp* temp = timestamp_;
  timestamp_ = NULL;
  return temp;
}
inline ::google::protobuf::Timestamp* CircleAnnotation::mutable_timestamp() {
  
  if (timestamp_ == NULL) {
    auto* p = CreateMaybeMessage<::google::protobuf::Timestamp>(GetArenaNoVirtual());
    timestamp_ = p;
  }
  // @@protoc_insertion_point(field_mutable:foxglove.CircleAnnotation.timestamp)
  return timestamp_;
}
inline void CircleAnnotation::set_allocated_timestamp(::google::protobuf::Timestamp* timestamp) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(timestamp_);
  }
  if (timestamp) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(timestamp)->GetArena();
    if (message_arena != submessage_arena) {
      timestamp = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, timestamp, submessage_arena);
    }
    
  } else {
    
  }
  timestamp_ = timestamp;
  // @@protoc_insertion_point(field_set_allocated:foxglove.CircleAnnotation.timestamp)
}

// .foxglove.Point2 position = 2;
inline bool CircleAnnotation::has_position() const {
  return this != internal_default_instance() && position_ != NULL;
}
inline const ::foxglove::Point2& CircleAnnotation::_internal_position() const {
  return *position_;
}
inline const ::foxglove::Point2& CircleAnnotation::position() const {
  const ::foxglove::Point2* p = position_;
  // @@protoc_insertion_point(field_get:foxglove.CircleAnnotation.position)
  return p != NULL ? *p : *reinterpret_cast<const ::foxglove::Point2*>(
      &::foxglove::_Point2_default_instance_);
}
inline ::foxglove::Point2* CircleAnnotation::release_position() {
  // @@protoc_insertion_point(field_release:foxglove.CircleAnnotation.position)
  
  ::foxglove::Point2* temp = position_;
  position_ = NULL;
  return temp;
}
inline ::foxglove::Point2* CircleAnnotation::mutable_position() {
  
  if (position_ == NULL) {
    auto* p = CreateMaybeMessage<::foxglove::Point2>(GetArenaNoVirtual());
    position_ = p;
  }
  // @@protoc_insertion_point(field_mutable:foxglove.CircleAnnotation.position)
  return position_;
}
inline void CircleAnnotation::set_allocated_position(::foxglove::Point2* position) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(position_);
  }
  if (position) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      position = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, position, submessage_arena);
    }
    
  } else {
    
  }
  position_ = position;
  // @@protoc_insertion_point(field_set_allocated:foxglove.CircleAnnotation.position)
}

// double diameter = 3;
inline void CircleAnnotation::clear_diameter() {
  diameter_ = 0;
}
inline double CircleAnnotation::diameter() const {
  // @@protoc_insertion_point(field_get:foxglove.CircleAnnotation.diameter)
  return diameter_;
}
inline void CircleAnnotation::set_diameter(double value) {
  
  diameter_ = value;
  // @@protoc_insertion_point(field_set:foxglove.CircleAnnotation.diameter)
}

// double thickness = 4;
inline void CircleAnnotation::clear_thickness() {
  thickness_ = 0;
}
inline double CircleAnnotation::thickness() const {
  // @@protoc_insertion_point(field_get:foxglove.CircleAnnotation.thickness)
  return thickness_;
}
inline void CircleAnnotation::set_thickness(double value) {
  
  thickness_ = value;
  // @@protoc_insertion_point(field_set:foxglove.CircleAnnotation.thickness)
}

// .foxglove.Color fill_color = 5;
inline bool CircleAnnotation::has_fill_color() const {
  return this != internal_default_instance() && fill_color_ != NULL;
}
inline const ::foxglove::Color& CircleAnnotation::_internal_fill_color() const {
  return *fill_color_;
}
inline const ::foxglove::Color& CircleAnnotation::fill_color() const {
  const ::foxglove::Color* p = fill_color_;
  // @@protoc_insertion_point(field_get:foxglove.CircleAnnotation.fill_color)
  return p != NULL ? *p : *reinterpret_cast<const ::foxglove::Color*>(
      &::foxglove::_Color_default_instance_);
}
inline ::foxglove::Color* CircleAnnotation::release_fill_color() {
  // @@protoc_insertion_point(field_release:foxglove.CircleAnnotation.fill_color)
  
  ::foxglove::Color* temp = fill_color_;
  fill_color_ = NULL;
  return temp;
}
inline ::foxglove::Color* CircleAnnotation::mutable_fill_color() {
  
  if (fill_color_ == NULL) {
    auto* p = CreateMaybeMessage<::foxglove::Color>(GetArenaNoVirtual());
    fill_color_ = p;
  }
  // @@protoc_insertion_point(field_mutable:foxglove.CircleAnnotation.fill_color)
  return fill_color_;
}
inline void CircleAnnotation::set_allocated_fill_color(::foxglove::Color* fill_color) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(fill_color_);
  }
  if (fill_color) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      fill_color = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, fill_color, submessage_arena);
    }
    
  } else {
    
  }
  fill_color_ = fill_color;
  // @@protoc_insertion_point(field_set_allocated:foxglove.CircleAnnotation.fill_color)
}

// .foxglove.Color outline_color = 6;
inline bool CircleAnnotation::has_outline_color() const {
  return this != internal_default_instance() && outline_color_ != NULL;
}
inline const ::foxglove::Color& CircleAnnotation::_internal_outline_color() const {
  return *outline_color_;
}
inline const ::foxglove::Color& CircleAnnotation::outline_color() const {
  const ::foxglove::Color* p = outline_color_;
  // @@protoc_insertion_point(field_get:foxglove.CircleAnnotation.outline_color)
  return p != NULL ? *p : *reinterpret_cast<const ::foxglove::Color*>(
      &::foxglove::_Color_default_instance_);
}
inline ::foxglove::Color* CircleAnnotation::release_outline_color() {
  // @@protoc_insertion_point(field_release:foxglove.CircleAnnotation.outline_color)
  
  ::foxglove::Color* temp = outline_color_;
  outline_color_ = NULL;
  return temp;
}
inline ::foxglove::Color* CircleAnnotation::mutable_outline_color() {
  
  if (outline_color_ == NULL) {
    auto* p = CreateMaybeMessage<::foxglove::Color>(GetArenaNoVirtual());
    outline_color_ = p;
  }
  // @@protoc_insertion_point(field_mutable:foxglove.CircleAnnotation.outline_color)
  return outline_color_;
}
inline void CircleAnnotation::set_allocated_outline_color(::foxglove::Color* outline_color) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(outline_color_);
  }
  if (outline_color) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      outline_color = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, outline_color, submessage_arena);
    }
    
  } else {
    
  }
  outline_color_ = outline_color;
  // @@protoc_insertion_point(field_set_allocated:foxglove.CircleAnnotation.outline_color)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace foxglove

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_foxglove_2fCircleAnnotation_2eproto
