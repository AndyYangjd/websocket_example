// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: foxglove/Grid.proto

#ifndef PROTOBUF_INCLUDED_foxglove_2fGrid_2eproto
#define PROTOBUF_INCLUDED_foxglove_2fGrid_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "foxglove/PackedElementField.pb.h"
#include "foxglove/Pose.pb.h"
#include "foxglove/Vector2.pb.h"
#include <google/protobuf/timestamp.pb.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_foxglove_2fGrid_2eproto 

namespace protobuf_foxglove_2fGrid_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[1];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_foxglove_2fGrid_2eproto
namespace foxglove {
class Grid;
class GridDefaultTypeInternal;
extern GridDefaultTypeInternal _Grid_default_instance_;
}  // namespace foxglove
namespace google {
namespace protobuf {
template<> ::foxglove::Grid* Arena::CreateMaybeMessage<::foxglove::Grid>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace foxglove {

// ===================================================================

class Grid : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:foxglove.Grid) */ {
 public:
  Grid();
  virtual ~Grid();

  Grid(const Grid& from);

  inline Grid& operator=(const Grid& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Grid(Grid&& from) noexcept
    : Grid() {
    *this = ::std::move(from);
  }

  inline Grid& operator=(Grid&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Grid& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Grid* internal_default_instance() {
    return reinterpret_cast<const Grid*>(
               &_Grid_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(Grid* other);
  friend void swap(Grid& a, Grid& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Grid* New() const final {
    return CreateMaybeMessage<Grid>(NULL);
  }

  Grid* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Grid>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Grid& from);
  void MergeFrom(const Grid& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Grid* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .foxglove.PackedElementField fields = 8;
  int fields_size() const;
  void clear_fields();
  static const int kFieldsFieldNumber = 8;
  ::foxglove::PackedElementField* mutable_fields(int index);
  ::google::protobuf::RepeatedPtrField< ::foxglove::PackedElementField >*
      mutable_fields();
  const ::foxglove::PackedElementField& fields(int index) const;
  ::foxglove::PackedElementField* add_fields();
  const ::google::protobuf::RepeatedPtrField< ::foxglove::PackedElementField >&
      fields() const;

  // string frame_id = 2;
  void clear_frame_id();
  static const int kFrameIdFieldNumber = 2;
  const ::std::string& frame_id() const;
  void set_frame_id(const ::std::string& value);
  #if LANG_CXX11
  void set_frame_id(::std::string&& value);
  #endif
  void set_frame_id(const char* value);
  void set_frame_id(const char* value, size_t size);
  ::std::string* mutable_frame_id();
  ::std::string* release_frame_id();
  void set_allocated_frame_id(::std::string* frame_id);

  // bytes data = 9;
  void clear_data();
  static const int kDataFieldNumber = 9;
  const ::std::string& data() const;
  void set_data(const ::std::string& value);
  #if LANG_CXX11
  void set_data(::std::string&& value);
  #endif
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  ::std::string* mutable_data();
  ::std::string* release_data();
  void set_allocated_data(::std::string* data);

  // .google.protobuf.Timestamp timestamp = 1;
  bool has_timestamp() const;
  void clear_timestamp();
  static const int kTimestampFieldNumber = 1;
  private:
  const ::google::protobuf::Timestamp& _internal_timestamp() const;
  public:
  const ::google::protobuf::Timestamp& timestamp() const;
  ::google::protobuf::Timestamp* release_timestamp();
  ::google::protobuf::Timestamp* mutable_timestamp();
  void set_allocated_timestamp(::google::protobuf::Timestamp* timestamp);

  // .foxglove.Pose pose = 3;
  bool has_pose() const;
  void clear_pose();
  static const int kPoseFieldNumber = 3;
  private:
  const ::foxglove::Pose& _internal_pose() const;
  public:
  const ::foxglove::Pose& pose() const;
  ::foxglove::Pose* release_pose();
  ::foxglove::Pose* mutable_pose();
  void set_allocated_pose(::foxglove::Pose* pose);

  // .foxglove.Vector2 cell_size = 5;
  bool has_cell_size() const;
  void clear_cell_size();
  static const int kCellSizeFieldNumber = 5;
  private:
  const ::foxglove::Vector2& _internal_cell_size() const;
  public:
  const ::foxglove::Vector2& cell_size() const;
  ::foxglove::Vector2* release_cell_size();
  ::foxglove::Vector2* mutable_cell_size();
  void set_allocated_cell_size(::foxglove::Vector2* cell_size);

  // fixed32 column_count = 4;
  void clear_column_count();
  static const int kColumnCountFieldNumber = 4;
  ::google::protobuf::uint32 column_count() const;
  void set_column_count(::google::protobuf::uint32 value);

  // fixed32 row_stride = 6;
  void clear_row_stride();
  static const int kRowStrideFieldNumber = 6;
  ::google::protobuf::uint32 row_stride() const;
  void set_row_stride(::google::protobuf::uint32 value);

  // fixed32 cell_stride = 7;
  void clear_cell_stride();
  static const int kCellStrideFieldNumber = 7;
  ::google::protobuf::uint32 cell_stride() const;
  void set_cell_stride(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:foxglove.Grid)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::foxglove::PackedElementField > fields_;
  ::google::protobuf::internal::ArenaStringPtr frame_id_;
  ::google::protobuf::internal::ArenaStringPtr data_;
  ::google::protobuf::Timestamp* timestamp_;
  ::foxglove::Pose* pose_;
  ::foxglove::Vector2* cell_size_;
  ::google::protobuf::uint32 column_count_;
  ::google::protobuf::uint32 row_stride_;
  ::google::protobuf::uint32 cell_stride_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_foxglove_2fGrid_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Grid

// .google.protobuf.Timestamp timestamp = 1;
inline bool Grid::has_timestamp() const {
  return this != internal_default_instance() && timestamp_ != NULL;
}
inline const ::google::protobuf::Timestamp& Grid::_internal_timestamp() const {
  return *timestamp_;
}
inline const ::google::protobuf::Timestamp& Grid::timestamp() const {
  const ::google::protobuf::Timestamp* p = timestamp_;
  // @@protoc_insertion_point(field_get:foxglove.Grid.timestamp)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::Timestamp*>(
      &::google::protobuf::_Timestamp_default_instance_);
}
inline ::google::protobuf::Timestamp* Grid::release_timestamp() {
  // @@protoc_insertion_point(field_release:foxglove.Grid.timestamp)
  
  ::google::protobuf::Timestamp* temp = timestamp_;
  timestamp_ = NULL;
  return temp;
}
inline ::google::protobuf::Timestamp* Grid::mutable_timestamp() {
  
  if (timestamp_ == NULL) {
    auto* p = CreateMaybeMessage<::google::protobuf::Timestamp>(GetArenaNoVirtual());
    timestamp_ = p;
  }
  // @@protoc_insertion_point(field_mutable:foxglove.Grid.timestamp)
  return timestamp_;
}
inline void Grid::set_allocated_timestamp(::google::protobuf::Timestamp* timestamp) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(timestamp_);
  }
  if (timestamp) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(timestamp)->GetArena();
    if (message_arena != submessage_arena) {
      timestamp = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, timestamp, submessage_arena);
    }
    
  } else {
    
  }
  timestamp_ = timestamp;
  // @@protoc_insertion_point(field_set_allocated:foxglove.Grid.timestamp)
}

// string frame_id = 2;
inline void Grid::clear_frame_id() {
  frame_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Grid::frame_id() const {
  // @@protoc_insertion_point(field_get:foxglove.Grid.frame_id)
  return frame_id_.GetNoArena();
}
inline void Grid::set_frame_id(const ::std::string& value) {
  
  frame_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:foxglove.Grid.frame_id)
}
#if LANG_CXX11
inline void Grid::set_frame_id(::std::string&& value) {
  
  frame_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:foxglove.Grid.frame_id)
}
#endif
inline void Grid::set_frame_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  frame_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:foxglove.Grid.frame_id)
}
inline void Grid::set_frame_id(const char* value, size_t size) {
  
  frame_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:foxglove.Grid.frame_id)
}
inline ::std::string* Grid::mutable_frame_id() {
  
  // @@protoc_insertion_point(field_mutable:foxglove.Grid.frame_id)
  return frame_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Grid::release_frame_id() {
  // @@protoc_insertion_point(field_release:foxglove.Grid.frame_id)
  
  return frame_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Grid::set_allocated_frame_id(::std::string* frame_id) {
  if (frame_id != NULL) {
    
  } else {
    
  }
  frame_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), frame_id);
  // @@protoc_insertion_point(field_set_allocated:foxglove.Grid.frame_id)
}

// .foxglove.Pose pose = 3;
inline bool Grid::has_pose() const {
  return this != internal_default_instance() && pose_ != NULL;
}
inline const ::foxglove::Pose& Grid::_internal_pose() const {
  return *pose_;
}
inline const ::foxglove::Pose& Grid::pose() const {
  const ::foxglove::Pose* p = pose_;
  // @@protoc_insertion_point(field_get:foxglove.Grid.pose)
  return p != NULL ? *p : *reinterpret_cast<const ::foxglove::Pose*>(
      &::foxglove::_Pose_default_instance_);
}
inline ::foxglove::Pose* Grid::release_pose() {
  // @@protoc_insertion_point(field_release:foxglove.Grid.pose)
  
  ::foxglove::Pose* temp = pose_;
  pose_ = NULL;
  return temp;
}
inline ::foxglove::Pose* Grid::mutable_pose() {
  
  if (pose_ == NULL) {
    auto* p = CreateMaybeMessage<::foxglove::Pose>(GetArenaNoVirtual());
    pose_ = p;
  }
  // @@protoc_insertion_point(field_mutable:foxglove.Grid.pose)
  return pose_;
}
inline void Grid::set_allocated_pose(::foxglove::Pose* pose) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(pose_);
  }
  if (pose) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      pose = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, pose, submessage_arena);
    }
    
  } else {
    
  }
  pose_ = pose;
  // @@protoc_insertion_point(field_set_allocated:foxglove.Grid.pose)
}

// fixed32 column_count = 4;
inline void Grid::clear_column_count() {
  column_count_ = 0u;
}
inline ::google::protobuf::uint32 Grid::column_count() const {
  // @@protoc_insertion_point(field_get:foxglove.Grid.column_count)
  return column_count_;
}
inline void Grid::set_column_count(::google::protobuf::uint32 value) {
  
  column_count_ = value;
  // @@protoc_insertion_point(field_set:foxglove.Grid.column_count)
}

// .foxglove.Vector2 cell_size = 5;
inline bool Grid::has_cell_size() const {
  return this != internal_default_instance() && cell_size_ != NULL;
}
inline const ::foxglove::Vector2& Grid::_internal_cell_size() const {
  return *cell_size_;
}
inline const ::foxglove::Vector2& Grid::cell_size() const {
  const ::foxglove::Vector2* p = cell_size_;
  // @@protoc_insertion_point(field_get:foxglove.Grid.cell_size)
  return p != NULL ? *p : *reinterpret_cast<const ::foxglove::Vector2*>(
      &::foxglove::_Vector2_default_instance_);
}
inline ::foxglove::Vector2* Grid::release_cell_size() {
  // @@protoc_insertion_point(field_release:foxglove.Grid.cell_size)
  
  ::foxglove::Vector2* temp = cell_size_;
  cell_size_ = NULL;
  return temp;
}
inline ::foxglove::Vector2* Grid::mutable_cell_size() {
  
  if (cell_size_ == NULL) {
    auto* p = CreateMaybeMessage<::foxglove::Vector2>(GetArenaNoVirtual());
    cell_size_ = p;
  }
  // @@protoc_insertion_point(field_mutable:foxglove.Grid.cell_size)
  return cell_size_;
}
inline void Grid::set_allocated_cell_size(::foxglove::Vector2* cell_size) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(cell_size_);
  }
  if (cell_size) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      cell_size = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, cell_size, submessage_arena);
    }
    
  } else {
    
  }
  cell_size_ = cell_size;
  // @@protoc_insertion_point(field_set_allocated:foxglove.Grid.cell_size)
}

// fixed32 row_stride = 6;
inline void Grid::clear_row_stride() {
  row_stride_ = 0u;
}
inline ::google::protobuf::uint32 Grid::row_stride() const {
  // @@protoc_insertion_point(field_get:foxglove.Grid.row_stride)
  return row_stride_;
}
inline void Grid::set_row_stride(::google::protobuf::uint32 value) {
  
  row_stride_ = value;
  // @@protoc_insertion_point(field_set:foxglove.Grid.row_stride)
}

// fixed32 cell_stride = 7;
inline void Grid::clear_cell_stride() {
  cell_stride_ = 0u;
}
inline ::google::protobuf::uint32 Grid::cell_stride() const {
  // @@protoc_insertion_point(field_get:foxglove.Grid.cell_stride)
  return cell_stride_;
}
inline void Grid::set_cell_stride(::google::protobuf::uint32 value) {
  
  cell_stride_ = value;
  // @@protoc_insertion_point(field_set:foxglove.Grid.cell_stride)
}

// repeated .foxglove.PackedElementField fields = 8;
inline int Grid::fields_size() const {
  return fields_.size();
}
inline ::foxglove::PackedElementField* Grid::mutable_fields(int index) {
  // @@protoc_insertion_point(field_mutable:foxglove.Grid.fields)
  return fields_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::foxglove::PackedElementField >*
Grid::mutable_fields() {
  // @@protoc_insertion_point(field_mutable_list:foxglove.Grid.fields)
  return &fields_;
}
inline const ::foxglove::PackedElementField& Grid::fields(int index) const {
  // @@protoc_insertion_point(field_get:foxglove.Grid.fields)
  return fields_.Get(index);
}
inline ::foxglove::PackedElementField* Grid::add_fields() {
  // @@protoc_insertion_point(field_add:foxglove.Grid.fields)
  return fields_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::foxglove::PackedElementField >&
Grid::fields() const {
  // @@protoc_insertion_point(field_list:foxglove.Grid.fields)
  return fields_;
}

// bytes data = 9;
inline void Grid::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Grid::data() const {
  // @@protoc_insertion_point(field_get:foxglove.Grid.data)
  return data_.GetNoArena();
}
inline void Grid::set_data(const ::std::string& value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:foxglove.Grid.data)
}
#if LANG_CXX11
inline void Grid::set_data(::std::string&& value) {
  
  data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:foxglove.Grid.data)
}
#endif
inline void Grid::set_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:foxglove.Grid.data)
}
inline void Grid::set_data(const void* value, size_t size) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:foxglove.Grid.data)
}
inline ::std::string* Grid::mutable_data() {
  
  // @@protoc_insertion_point(field_mutable:foxglove.Grid.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Grid::release_data() {
  // @@protoc_insertion_point(field_release:foxglove.Grid.data)
  
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Grid::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:foxglove.Grid.data)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace foxglove

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_foxglove_2fGrid_2eproto
