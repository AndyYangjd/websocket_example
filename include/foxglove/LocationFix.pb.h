// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: foxglove/LocationFix.proto

#ifndef PROTOBUF_INCLUDED_foxglove_2fLocationFix_2eproto
#define PROTOBUF_INCLUDED_foxglove_2fLocationFix_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_foxglove_2fLocationFix_2eproto 

namespace protobuf_foxglove_2fLocationFix_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[1];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_foxglove_2fLocationFix_2eproto
namespace foxglove {
class LocationFix;
class LocationFixDefaultTypeInternal;
extern LocationFixDefaultTypeInternal _LocationFix_default_instance_;
}  // namespace foxglove
namespace google {
namespace protobuf {
template<> ::foxglove::LocationFix* Arena::CreateMaybeMessage<::foxglove::LocationFix>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace foxglove {

enum LocationFix_PositionCovarianceType {
  LocationFix_PositionCovarianceType_UNKNOWN = 0,
  LocationFix_PositionCovarianceType_APPROXIMATED = 1,
  LocationFix_PositionCovarianceType_DIAGONAL_KNOWN = 2,
  LocationFix_PositionCovarianceType_KNOWN = 3,
  LocationFix_PositionCovarianceType_LocationFix_PositionCovarianceType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  LocationFix_PositionCovarianceType_LocationFix_PositionCovarianceType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool LocationFix_PositionCovarianceType_IsValid(int value);
const LocationFix_PositionCovarianceType LocationFix_PositionCovarianceType_PositionCovarianceType_MIN = LocationFix_PositionCovarianceType_UNKNOWN;
const LocationFix_PositionCovarianceType LocationFix_PositionCovarianceType_PositionCovarianceType_MAX = LocationFix_PositionCovarianceType_KNOWN;
const int LocationFix_PositionCovarianceType_PositionCovarianceType_ARRAYSIZE = LocationFix_PositionCovarianceType_PositionCovarianceType_MAX + 1;

const ::google::protobuf::EnumDescriptor* LocationFix_PositionCovarianceType_descriptor();
inline const ::std::string& LocationFix_PositionCovarianceType_Name(LocationFix_PositionCovarianceType value) {
  return ::google::protobuf::internal::NameOfEnum(
    LocationFix_PositionCovarianceType_descriptor(), value);
}
inline bool LocationFix_PositionCovarianceType_Parse(
    const ::std::string& name, LocationFix_PositionCovarianceType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<LocationFix_PositionCovarianceType>(
    LocationFix_PositionCovarianceType_descriptor(), name, value);
}
// ===================================================================

class LocationFix : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:foxglove.LocationFix) */ {
 public:
  LocationFix();
  virtual ~LocationFix();

  LocationFix(const LocationFix& from);

  inline LocationFix& operator=(const LocationFix& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LocationFix(LocationFix&& from) noexcept
    : LocationFix() {
    *this = ::std::move(from);
  }

  inline LocationFix& operator=(LocationFix&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const LocationFix& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LocationFix* internal_default_instance() {
    return reinterpret_cast<const LocationFix*>(
               &_LocationFix_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(LocationFix* other);
  friend void swap(LocationFix& a, LocationFix& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LocationFix* New() const final {
    return CreateMaybeMessage<LocationFix>(NULL);
  }

  LocationFix* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<LocationFix>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const LocationFix& from);
  void MergeFrom(const LocationFix& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LocationFix* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef LocationFix_PositionCovarianceType PositionCovarianceType;
  static const PositionCovarianceType UNKNOWN =
    LocationFix_PositionCovarianceType_UNKNOWN;
  static const PositionCovarianceType APPROXIMATED =
    LocationFix_PositionCovarianceType_APPROXIMATED;
  static const PositionCovarianceType DIAGONAL_KNOWN =
    LocationFix_PositionCovarianceType_DIAGONAL_KNOWN;
  static const PositionCovarianceType KNOWN =
    LocationFix_PositionCovarianceType_KNOWN;
  static inline bool PositionCovarianceType_IsValid(int value) {
    return LocationFix_PositionCovarianceType_IsValid(value);
  }
  static const PositionCovarianceType PositionCovarianceType_MIN =
    LocationFix_PositionCovarianceType_PositionCovarianceType_MIN;
  static const PositionCovarianceType PositionCovarianceType_MAX =
    LocationFix_PositionCovarianceType_PositionCovarianceType_MAX;
  static const int PositionCovarianceType_ARRAYSIZE =
    LocationFix_PositionCovarianceType_PositionCovarianceType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  PositionCovarianceType_descriptor() {
    return LocationFix_PositionCovarianceType_descriptor();
  }
  static inline const ::std::string& PositionCovarianceType_Name(PositionCovarianceType value) {
    return LocationFix_PositionCovarianceType_Name(value);
  }
  static inline bool PositionCovarianceType_Parse(const ::std::string& name,
      PositionCovarianceType* value) {
    return LocationFix_PositionCovarianceType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated double position_covariance = 4;
  int position_covariance_size() const;
  void clear_position_covariance();
  static const int kPositionCovarianceFieldNumber = 4;
  double position_covariance(int index) const;
  void set_position_covariance(int index, double value);
  void add_position_covariance(double value);
  const ::google::protobuf::RepeatedField< double >&
      position_covariance() const;
  ::google::protobuf::RepeatedField< double >*
      mutable_position_covariance();

  // double latitude = 1;
  void clear_latitude();
  static const int kLatitudeFieldNumber = 1;
  double latitude() const;
  void set_latitude(double value);

  // double longitude = 2;
  void clear_longitude();
  static const int kLongitudeFieldNumber = 2;
  double longitude() const;
  void set_longitude(double value);

  // double altitude = 3;
  void clear_altitude();
  static const int kAltitudeFieldNumber = 3;
  double altitude() const;
  void set_altitude(double value);

  // .foxglove.LocationFix.PositionCovarianceType position_covariance_type = 5;
  void clear_position_covariance_type();
  static const int kPositionCovarianceTypeFieldNumber = 5;
  ::foxglove::LocationFix_PositionCovarianceType position_covariance_type() const;
  void set_position_covariance_type(::foxglove::LocationFix_PositionCovarianceType value);

  // @@protoc_insertion_point(class_scope:foxglove.LocationFix)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< double > position_covariance_;
  mutable int _position_covariance_cached_byte_size_;
  double latitude_;
  double longitude_;
  double altitude_;
  int position_covariance_type_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_foxglove_2fLocationFix_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// LocationFix

// double latitude = 1;
inline void LocationFix::clear_latitude() {
  latitude_ = 0;
}
inline double LocationFix::latitude() const {
  // @@protoc_insertion_point(field_get:foxglove.LocationFix.latitude)
  return latitude_;
}
inline void LocationFix::set_latitude(double value) {
  
  latitude_ = value;
  // @@protoc_insertion_point(field_set:foxglove.LocationFix.latitude)
}

// double longitude = 2;
inline void LocationFix::clear_longitude() {
  longitude_ = 0;
}
inline double LocationFix::longitude() const {
  // @@protoc_insertion_point(field_get:foxglove.LocationFix.longitude)
  return longitude_;
}
inline void LocationFix::set_longitude(double value) {
  
  longitude_ = value;
  // @@protoc_insertion_point(field_set:foxglove.LocationFix.longitude)
}

// double altitude = 3;
inline void LocationFix::clear_altitude() {
  altitude_ = 0;
}
inline double LocationFix::altitude() const {
  // @@protoc_insertion_point(field_get:foxglove.LocationFix.altitude)
  return altitude_;
}
inline void LocationFix::set_altitude(double value) {
  
  altitude_ = value;
  // @@protoc_insertion_point(field_set:foxglove.LocationFix.altitude)
}

// repeated double position_covariance = 4;
inline int LocationFix::position_covariance_size() const {
  return position_covariance_.size();
}
inline void LocationFix::clear_position_covariance() {
  position_covariance_.Clear();
}
inline double LocationFix::position_covariance(int index) const {
  // @@protoc_insertion_point(field_get:foxglove.LocationFix.position_covariance)
  return position_covariance_.Get(index);
}
inline void LocationFix::set_position_covariance(int index, double value) {
  position_covariance_.Set(index, value);
  // @@protoc_insertion_point(field_set:foxglove.LocationFix.position_covariance)
}
inline void LocationFix::add_position_covariance(double value) {
  position_covariance_.Add(value);
  // @@protoc_insertion_point(field_add:foxglove.LocationFix.position_covariance)
}
inline const ::google::protobuf::RepeatedField< double >&
LocationFix::position_covariance() const {
  // @@protoc_insertion_point(field_list:foxglove.LocationFix.position_covariance)
  return position_covariance_;
}
inline ::google::protobuf::RepeatedField< double >*
LocationFix::mutable_position_covariance() {
  // @@protoc_insertion_point(field_mutable_list:foxglove.LocationFix.position_covariance)
  return &position_covariance_;
}

// .foxglove.LocationFix.PositionCovarianceType position_covariance_type = 5;
inline void LocationFix::clear_position_covariance_type() {
  position_covariance_type_ = 0;
}
inline ::foxglove::LocationFix_PositionCovarianceType LocationFix::position_covariance_type() const {
  // @@protoc_insertion_point(field_get:foxglove.LocationFix.position_covariance_type)
  return static_cast< ::foxglove::LocationFix_PositionCovarianceType >(position_covariance_type_);
}
inline void LocationFix::set_position_covariance_type(::foxglove::LocationFix_PositionCovarianceType value) {
  
  position_covariance_type_ = value;
  // @@protoc_insertion_point(field_set:foxglove.LocationFix.position_covariance_type)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace foxglove

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::foxglove::LocationFix_PositionCovarianceType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::foxglove::LocationFix_PositionCovarianceType>() {
  return ::foxglove::LocationFix_PositionCovarianceType_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_foxglove_2fLocationFix_2eproto
