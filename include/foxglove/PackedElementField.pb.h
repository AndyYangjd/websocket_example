// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: foxglove/PackedElementField.proto

#ifndef PROTOBUF_INCLUDED_foxglove_2fPackedElementField_2eproto
#define PROTOBUF_INCLUDED_foxglove_2fPackedElementField_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_foxglove_2fPackedElementField_2eproto 

namespace protobuf_foxglove_2fPackedElementField_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[1];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_foxglove_2fPackedElementField_2eproto
namespace foxglove {
class PackedElementField;
class PackedElementFieldDefaultTypeInternal;
extern PackedElementFieldDefaultTypeInternal _PackedElementField_default_instance_;
}  // namespace foxglove
namespace google {
namespace protobuf {
template<> ::foxglove::PackedElementField* Arena::CreateMaybeMessage<::foxglove::PackedElementField>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace foxglove {

enum PackedElementField_NumericType {
  PackedElementField_NumericType_UNKNOWN = 0,
  PackedElementField_NumericType_UINT8 = 1,
  PackedElementField_NumericType_INT8 = 2,
  PackedElementField_NumericType_UINT16 = 3,
  PackedElementField_NumericType_INT16 = 4,
  PackedElementField_NumericType_UINT32 = 5,
  PackedElementField_NumericType_INT32 = 6,
  PackedElementField_NumericType_FLOAT32 = 7,
  PackedElementField_NumericType_FLOAT64 = 8,
  PackedElementField_NumericType_PackedElementField_NumericType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  PackedElementField_NumericType_PackedElementField_NumericType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool PackedElementField_NumericType_IsValid(int value);
const PackedElementField_NumericType PackedElementField_NumericType_NumericType_MIN = PackedElementField_NumericType_UNKNOWN;
const PackedElementField_NumericType PackedElementField_NumericType_NumericType_MAX = PackedElementField_NumericType_FLOAT64;
const int PackedElementField_NumericType_NumericType_ARRAYSIZE = PackedElementField_NumericType_NumericType_MAX + 1;

const ::google::protobuf::EnumDescriptor* PackedElementField_NumericType_descriptor();
inline const ::std::string& PackedElementField_NumericType_Name(PackedElementField_NumericType value) {
  return ::google::protobuf::internal::NameOfEnum(
    PackedElementField_NumericType_descriptor(), value);
}
inline bool PackedElementField_NumericType_Parse(
    const ::std::string& name, PackedElementField_NumericType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<PackedElementField_NumericType>(
    PackedElementField_NumericType_descriptor(), name, value);
}
// ===================================================================

class PackedElementField : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:foxglove.PackedElementField) */ {
 public:
  PackedElementField();
  virtual ~PackedElementField();

  PackedElementField(const PackedElementField& from);

  inline PackedElementField& operator=(const PackedElementField& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PackedElementField(PackedElementField&& from) noexcept
    : PackedElementField() {
    *this = ::std::move(from);
  }

  inline PackedElementField& operator=(PackedElementField&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PackedElementField& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PackedElementField* internal_default_instance() {
    return reinterpret_cast<const PackedElementField*>(
               &_PackedElementField_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(PackedElementField* other);
  friend void swap(PackedElementField& a, PackedElementField& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PackedElementField* New() const final {
    return CreateMaybeMessage<PackedElementField>(NULL);
  }

  PackedElementField* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PackedElementField>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PackedElementField& from);
  void MergeFrom(const PackedElementField& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PackedElementField* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef PackedElementField_NumericType NumericType;
  static const NumericType UNKNOWN =
    PackedElementField_NumericType_UNKNOWN;
  static const NumericType UINT8 =
    PackedElementField_NumericType_UINT8;
  static const NumericType INT8 =
    PackedElementField_NumericType_INT8;
  static const NumericType UINT16 =
    PackedElementField_NumericType_UINT16;
  static const NumericType INT16 =
    PackedElementField_NumericType_INT16;
  static const NumericType UINT32 =
    PackedElementField_NumericType_UINT32;
  static const NumericType INT32 =
    PackedElementField_NumericType_INT32;
  static const NumericType FLOAT32 =
    PackedElementField_NumericType_FLOAT32;
  static const NumericType FLOAT64 =
    PackedElementField_NumericType_FLOAT64;
  static inline bool NumericType_IsValid(int value) {
    return PackedElementField_NumericType_IsValid(value);
  }
  static const NumericType NumericType_MIN =
    PackedElementField_NumericType_NumericType_MIN;
  static const NumericType NumericType_MAX =
    PackedElementField_NumericType_NumericType_MAX;
  static const int NumericType_ARRAYSIZE =
    PackedElementField_NumericType_NumericType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  NumericType_descriptor() {
    return PackedElementField_NumericType_descriptor();
  }
  static inline const ::std::string& NumericType_Name(NumericType value) {
    return PackedElementField_NumericType_Name(value);
  }
  static inline bool NumericType_Parse(const ::std::string& name,
      NumericType* value) {
    return PackedElementField_NumericType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // fixed32 offset = 2;
  void clear_offset();
  static const int kOffsetFieldNumber = 2;
  ::google::protobuf::uint32 offset() const;
  void set_offset(::google::protobuf::uint32 value);

  // .foxglove.PackedElementField.NumericType type = 3;
  void clear_type();
  static const int kTypeFieldNumber = 3;
  ::foxglove::PackedElementField_NumericType type() const;
  void set_type(::foxglove::PackedElementField_NumericType value);

  // @@protoc_insertion_point(class_scope:foxglove.PackedElementField)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::uint32 offset_;
  int type_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_foxglove_2fPackedElementField_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// PackedElementField

// string name = 1;
inline void PackedElementField::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PackedElementField::name() const {
  // @@protoc_insertion_point(field_get:foxglove.PackedElementField.name)
  return name_.GetNoArena();
}
inline void PackedElementField::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:foxglove.PackedElementField.name)
}
#if LANG_CXX11
inline void PackedElementField::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:foxglove.PackedElementField.name)
}
#endif
inline void PackedElementField::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:foxglove.PackedElementField.name)
}
inline void PackedElementField::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:foxglove.PackedElementField.name)
}
inline ::std::string* PackedElementField::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:foxglove.PackedElementField.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PackedElementField::release_name() {
  // @@protoc_insertion_point(field_release:foxglove.PackedElementField.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PackedElementField::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:foxglove.PackedElementField.name)
}

// fixed32 offset = 2;
inline void PackedElementField::clear_offset() {
  offset_ = 0u;
}
inline ::google::protobuf::uint32 PackedElementField::offset() const {
  // @@protoc_insertion_point(field_get:foxglove.PackedElementField.offset)
  return offset_;
}
inline void PackedElementField::set_offset(::google::protobuf::uint32 value) {
  
  offset_ = value;
  // @@protoc_insertion_point(field_set:foxglove.PackedElementField.offset)
}

// .foxglove.PackedElementField.NumericType type = 3;
inline void PackedElementField::clear_type() {
  type_ = 0;
}
inline ::foxglove::PackedElementField_NumericType PackedElementField::type() const {
  // @@protoc_insertion_point(field_get:foxglove.PackedElementField.type)
  return static_cast< ::foxglove::PackedElementField_NumericType >(type_);
}
inline void PackedElementField::set_type(::foxglove::PackedElementField_NumericType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:foxglove.PackedElementField.type)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace foxglove

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::foxglove::PackedElementField_NumericType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::foxglove::PackedElementField_NumericType>() {
  return ::foxglove::PackedElementField_NumericType_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_foxglove_2fPackedElementField_2eproto
