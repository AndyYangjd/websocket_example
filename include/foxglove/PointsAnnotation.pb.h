// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: foxglove/PointsAnnotation.proto

#ifndef PROTOBUF_INCLUDED_foxglove_2fPointsAnnotation_2eproto
#define PROTOBUF_INCLUDED_foxglove_2fPointsAnnotation_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "foxglove/Color.pb.h"
#include "foxglove/Point2.pb.h"
#include <google/protobuf/timestamp.pb.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_foxglove_2fPointsAnnotation_2eproto 

namespace protobuf_foxglove_2fPointsAnnotation_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[1];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_foxglove_2fPointsAnnotation_2eproto
namespace foxglove {
class PointsAnnotation;
class PointsAnnotationDefaultTypeInternal;
extern PointsAnnotationDefaultTypeInternal _PointsAnnotation_default_instance_;
}  // namespace foxglove
namespace google {
namespace protobuf {
template<> ::foxglove::PointsAnnotation* Arena::CreateMaybeMessage<::foxglove::PointsAnnotation>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace foxglove {

enum PointsAnnotation_Type {
  PointsAnnotation_Type_UNKNOWN = 0,
  PointsAnnotation_Type_POINTS = 1,
  PointsAnnotation_Type_LINE_LOOP = 2,
  PointsAnnotation_Type_LINE_STRIP = 3,
  PointsAnnotation_Type_LINE_LIST = 4,
  PointsAnnotation_Type_PointsAnnotation_Type_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  PointsAnnotation_Type_PointsAnnotation_Type_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool PointsAnnotation_Type_IsValid(int value);
const PointsAnnotation_Type PointsAnnotation_Type_Type_MIN = PointsAnnotation_Type_UNKNOWN;
const PointsAnnotation_Type PointsAnnotation_Type_Type_MAX = PointsAnnotation_Type_LINE_LIST;
const int PointsAnnotation_Type_Type_ARRAYSIZE = PointsAnnotation_Type_Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* PointsAnnotation_Type_descriptor();
inline const ::std::string& PointsAnnotation_Type_Name(PointsAnnotation_Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    PointsAnnotation_Type_descriptor(), value);
}
inline bool PointsAnnotation_Type_Parse(
    const ::std::string& name, PointsAnnotation_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<PointsAnnotation_Type>(
    PointsAnnotation_Type_descriptor(), name, value);
}
// ===================================================================

class PointsAnnotation : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:foxglove.PointsAnnotation) */ {
 public:
  PointsAnnotation();
  virtual ~PointsAnnotation();

  PointsAnnotation(const PointsAnnotation& from);

  inline PointsAnnotation& operator=(const PointsAnnotation& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PointsAnnotation(PointsAnnotation&& from) noexcept
    : PointsAnnotation() {
    *this = ::std::move(from);
  }

  inline PointsAnnotation& operator=(PointsAnnotation&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PointsAnnotation& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PointsAnnotation* internal_default_instance() {
    return reinterpret_cast<const PointsAnnotation*>(
               &_PointsAnnotation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(PointsAnnotation* other);
  friend void swap(PointsAnnotation& a, PointsAnnotation& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PointsAnnotation* New() const final {
    return CreateMaybeMessage<PointsAnnotation>(NULL);
  }

  PointsAnnotation* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PointsAnnotation>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PointsAnnotation& from);
  void MergeFrom(const PointsAnnotation& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PointsAnnotation* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef PointsAnnotation_Type Type;
  static const Type UNKNOWN =
    PointsAnnotation_Type_UNKNOWN;
  static const Type POINTS =
    PointsAnnotation_Type_POINTS;
  static const Type LINE_LOOP =
    PointsAnnotation_Type_LINE_LOOP;
  static const Type LINE_STRIP =
    PointsAnnotation_Type_LINE_STRIP;
  static const Type LINE_LIST =
    PointsAnnotation_Type_LINE_LIST;
  static inline bool Type_IsValid(int value) {
    return PointsAnnotation_Type_IsValid(value);
  }
  static const Type Type_MIN =
    PointsAnnotation_Type_Type_MIN;
  static const Type Type_MAX =
    PointsAnnotation_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    PointsAnnotation_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Type_descriptor() {
    return PointsAnnotation_Type_descriptor();
  }
  static inline const ::std::string& Type_Name(Type value) {
    return PointsAnnotation_Type_Name(value);
  }
  static inline bool Type_Parse(const ::std::string& name,
      Type* value) {
    return PointsAnnotation_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated .foxglove.Point2 points = 3;
  int points_size() const;
  void clear_points();
  static const int kPointsFieldNumber = 3;
  ::foxglove::Point2* mutable_points(int index);
  ::google::protobuf::RepeatedPtrField< ::foxglove::Point2 >*
      mutable_points();
  const ::foxglove::Point2& points(int index) const;
  ::foxglove::Point2* add_points();
  const ::google::protobuf::RepeatedPtrField< ::foxglove::Point2 >&
      points() const;

  // repeated .foxglove.Color outline_colors = 4;
  int outline_colors_size() const;
  void clear_outline_colors();
  static const int kOutlineColorsFieldNumber = 4;
  ::foxglove::Color* mutable_outline_colors(int index);
  ::google::protobuf::RepeatedPtrField< ::foxglove::Color >*
      mutable_outline_colors();
  const ::foxglove::Color& outline_colors(int index) const;
  ::foxglove::Color* add_outline_colors();
  const ::google::protobuf::RepeatedPtrField< ::foxglove::Color >&
      outline_colors() const;

  // .google.protobuf.Timestamp timestamp = 1;
  bool has_timestamp() const;
  void clear_timestamp();
  static const int kTimestampFieldNumber = 1;
  private:
  const ::google::protobuf::Timestamp& _internal_timestamp() const;
  public:
  const ::google::protobuf::Timestamp& timestamp() const;
  ::google::protobuf::Timestamp* release_timestamp();
  ::google::protobuf::Timestamp* mutable_timestamp();
  void set_allocated_timestamp(::google::protobuf::Timestamp* timestamp);

  // .foxglove.Color fill_color = 5;
  bool has_fill_color() const;
  void clear_fill_color();
  static const int kFillColorFieldNumber = 5;
  private:
  const ::foxglove::Color& _internal_fill_color() const;
  public:
  const ::foxglove::Color& fill_color() const;
  ::foxglove::Color* release_fill_color();
  ::foxglove::Color* mutable_fill_color();
  void set_allocated_fill_color(::foxglove::Color* fill_color);

  // .foxglove.PointsAnnotation.Type type = 2;
  void clear_type();
  static const int kTypeFieldNumber = 2;
  ::foxglove::PointsAnnotation_Type type() const;
  void set_type(::foxglove::PointsAnnotation_Type value);

  // @@protoc_insertion_point(class_scope:foxglove.PointsAnnotation)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::foxglove::Point2 > points_;
  ::google::protobuf::RepeatedPtrField< ::foxglove::Color > outline_colors_;
  ::google::protobuf::Timestamp* timestamp_;
  ::foxglove::Color* fill_color_;
  int type_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_foxglove_2fPointsAnnotation_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// PointsAnnotation

// .google.protobuf.Timestamp timestamp = 1;
inline bool PointsAnnotation::has_timestamp() const {
  return this != internal_default_instance() && timestamp_ != NULL;
}
inline const ::google::protobuf::Timestamp& PointsAnnotation::_internal_timestamp() const {
  return *timestamp_;
}
inline const ::google::protobuf::Timestamp& PointsAnnotation::timestamp() const {
  const ::google::protobuf::Timestamp* p = timestamp_;
  // @@protoc_insertion_point(field_get:foxglove.PointsAnnotation.timestamp)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::Timestamp*>(
      &::google::protobuf::_Timestamp_default_instance_);
}
inline ::google::protobuf::Timestamp* PointsAnnotation::release_timestamp() {
  // @@protoc_insertion_point(field_release:foxglove.PointsAnnotation.timestamp)
  
  ::google::protobuf::Timestamp* temp = timestamp_;
  timestamp_ = NULL;
  return temp;
}
inline ::google::protobuf::Timestamp* PointsAnnotation::mutable_timestamp() {
  
  if (timestamp_ == NULL) {
    auto* p = CreateMaybeMessage<::google::protobuf::Timestamp>(GetArenaNoVirtual());
    timestamp_ = p;
  }
  // @@protoc_insertion_point(field_mutable:foxglove.PointsAnnotation.timestamp)
  return timestamp_;
}
inline void PointsAnnotation::set_allocated_timestamp(::google::protobuf::Timestamp* timestamp) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(timestamp_);
  }
  if (timestamp) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(timestamp)->GetArena();
    if (message_arena != submessage_arena) {
      timestamp = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, timestamp, submessage_arena);
    }
    
  } else {
    
  }
  timestamp_ = timestamp;
  // @@protoc_insertion_point(field_set_allocated:foxglove.PointsAnnotation.timestamp)
}

// .foxglove.PointsAnnotation.Type type = 2;
inline void PointsAnnotation::clear_type() {
  type_ = 0;
}
inline ::foxglove::PointsAnnotation_Type PointsAnnotation::type() const {
  // @@protoc_insertion_point(field_get:foxglove.PointsAnnotation.type)
  return static_cast< ::foxglove::PointsAnnotation_Type >(type_);
}
inline void PointsAnnotation::set_type(::foxglove::PointsAnnotation_Type value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:foxglove.PointsAnnotation.type)
}

// repeated .foxglove.Point2 points = 3;
inline int PointsAnnotation::points_size() const {
  return points_.size();
}
inline ::foxglove::Point2* PointsAnnotation::mutable_points(int index) {
  // @@protoc_insertion_point(field_mutable:foxglove.PointsAnnotation.points)
  return points_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::foxglove::Point2 >*
PointsAnnotation::mutable_points() {
  // @@protoc_insertion_point(field_mutable_list:foxglove.PointsAnnotation.points)
  return &points_;
}
inline const ::foxglove::Point2& PointsAnnotation::points(int index) const {
  // @@protoc_insertion_point(field_get:foxglove.PointsAnnotation.points)
  return points_.Get(index);
}
inline ::foxglove::Point2* PointsAnnotation::add_points() {
  // @@protoc_insertion_point(field_add:foxglove.PointsAnnotation.points)
  return points_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::foxglove::Point2 >&
PointsAnnotation::points() const {
  // @@protoc_insertion_point(field_list:foxglove.PointsAnnotation.points)
  return points_;
}

// repeated .foxglove.Color outline_colors = 4;
inline int PointsAnnotation::outline_colors_size() const {
  return outline_colors_.size();
}
inline ::foxglove::Color* PointsAnnotation::mutable_outline_colors(int index) {
  // @@protoc_insertion_point(field_mutable:foxglove.PointsAnnotation.outline_colors)
  return outline_colors_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::foxglove::Color >*
PointsAnnotation::mutable_outline_colors() {
  // @@protoc_insertion_point(field_mutable_list:foxglove.PointsAnnotation.outline_colors)
  return &outline_colors_;
}
inline const ::foxglove::Color& PointsAnnotation::outline_colors(int index) const {
  // @@protoc_insertion_point(field_get:foxglove.PointsAnnotation.outline_colors)
  return outline_colors_.Get(index);
}
inline ::foxglove::Color* PointsAnnotation::add_outline_colors() {
  // @@protoc_insertion_point(field_add:foxglove.PointsAnnotation.outline_colors)
  return outline_colors_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::foxglove::Color >&
PointsAnnotation::outline_colors() const {
  // @@protoc_insertion_point(field_list:foxglove.PointsAnnotation.outline_colors)
  return outline_colors_;
}

// .foxglove.Color fill_color = 5;
inline bool PointsAnnotation::has_fill_color() const {
  return this != internal_default_instance() && fill_color_ != NULL;
}
inline const ::foxglove::Color& PointsAnnotation::_internal_fill_color() const {
  return *fill_color_;
}
inline const ::foxglove::Color& PointsAnnotation::fill_color() const {
  const ::foxglove::Color* p = fill_color_;
  // @@protoc_insertion_point(field_get:foxglove.PointsAnnotation.fill_color)
  return p != NULL ? *p : *reinterpret_cast<const ::foxglove::Color*>(
      &::foxglove::_Color_default_instance_);
}
inline ::foxglove::Color* PointsAnnotation::release_fill_color() {
  // @@protoc_insertion_point(field_release:foxglove.PointsAnnotation.fill_color)
  
  ::foxglove::Color* temp = fill_color_;
  fill_color_ = NULL;
  return temp;
}
inline ::foxglove::Color* PointsAnnotation::mutable_fill_color() {
  
  if (fill_color_ == NULL) {
    auto* p = CreateMaybeMessage<::foxglove::Color>(GetArenaNoVirtual());
    fill_color_ = p;
  }
  // @@protoc_insertion_point(field_mutable:foxglove.PointsAnnotation.fill_color)
  return fill_color_;
}
inline void PointsAnnotation::set_allocated_fill_color(::foxglove::Color* fill_color) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(fill_color_);
  }
  if (fill_color) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      fill_color = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, fill_color, submessage_arena);
    }
    
  } else {
    
  }
  fill_color_ = fill_color;
  // @@protoc_insertion_point(field_set_allocated:foxglove.PointsAnnotation.fill_color)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace foxglove

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::foxglove::PointsAnnotation_Type> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::foxglove::PointsAnnotation_Type>() {
  return ::foxglove::PointsAnnotation_Type_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_foxglove_2fPointsAnnotation_2eproto
