// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: foxglove/LocationFix.proto

#include "foxglove/LocationFix.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace foxglove {
class LocationFixDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LocationFix>
      _instance;
} _LocationFix_default_instance_;
}  // namespace foxglove
namespace protobuf_foxglove_2fLocationFix_2eproto {
static void InitDefaultsLocationFix() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::foxglove::_LocationFix_default_instance_;
    new (ptr) ::foxglove::LocationFix();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::foxglove::LocationFix::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_LocationFix =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsLocationFix}, {}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_LocationFix.base);
}

::google::protobuf::Metadata file_level_metadata[1];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[1];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::foxglove::LocationFix, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::foxglove::LocationFix, latitude_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::foxglove::LocationFix, longitude_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::foxglove::LocationFix, altitude_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::foxglove::LocationFix, position_covariance_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::foxglove::LocationFix, position_covariance_type_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::foxglove::LocationFix)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::foxglove::_LocationFix_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "foxglove/LocationFix.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 1);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\032foxglove/LocationFix.proto\022\010foxglove\"\211"
      "\002\n\013LocationFix\022\020\n\010latitude\030\001 \001(\001\022\021\n\tlong"
      "itude\030\002 \001(\001\022\020\n\010altitude\030\003 \001(\001\022\033\n\023positio"
      "n_covariance\030\004 \003(\001\022N\n\030position_covarianc"
      "e_type\030\005 \001(\0162,.foxglove.LocationFix.Posi"
      "tionCovarianceType\"V\n\026PositionCovariance"
      "Type\022\013\n\007UNKNOWN\020\000\022\020\n\014APPROXIMATED\020\001\022\022\n\016D"
      "IAGONAL_KNOWN\020\002\022\t\n\005KNOWN\020\003b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 314);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "foxglove/LocationFix.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_foxglove_2fLocationFix_2eproto
namespace foxglove {
const ::google::protobuf::EnumDescriptor* LocationFix_PositionCovarianceType_descriptor() {
  protobuf_foxglove_2fLocationFix_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_foxglove_2fLocationFix_2eproto::file_level_enum_descriptors[0];
}
bool LocationFix_PositionCovarianceType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const LocationFix_PositionCovarianceType LocationFix::UNKNOWN;
const LocationFix_PositionCovarianceType LocationFix::APPROXIMATED;
const LocationFix_PositionCovarianceType LocationFix::DIAGONAL_KNOWN;
const LocationFix_PositionCovarianceType LocationFix::KNOWN;
const LocationFix_PositionCovarianceType LocationFix::PositionCovarianceType_MIN;
const LocationFix_PositionCovarianceType LocationFix::PositionCovarianceType_MAX;
const int LocationFix::PositionCovarianceType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

void LocationFix::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LocationFix::kLatitudeFieldNumber;
const int LocationFix::kLongitudeFieldNumber;
const int LocationFix::kAltitudeFieldNumber;
const int LocationFix::kPositionCovarianceFieldNumber;
const int LocationFix::kPositionCovarianceTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LocationFix::LocationFix()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_foxglove_2fLocationFix_2eproto::scc_info_LocationFix.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:foxglove.LocationFix)
}
LocationFix::LocationFix(const LocationFix& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      position_covariance_(from.position_covariance_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&latitude_, &from.latitude_,
    static_cast<size_t>(reinterpret_cast<char*>(&position_covariance_type_) -
    reinterpret_cast<char*>(&latitude_)) + sizeof(position_covariance_type_));
  // @@protoc_insertion_point(copy_constructor:foxglove.LocationFix)
}

void LocationFix::SharedCtor() {
  ::memset(&latitude_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&position_covariance_type_) -
      reinterpret_cast<char*>(&latitude_)) + sizeof(position_covariance_type_));
}

LocationFix::~LocationFix() {
  // @@protoc_insertion_point(destructor:foxglove.LocationFix)
  SharedDtor();
}

void LocationFix::SharedDtor() {
}

void LocationFix::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* LocationFix::descriptor() {
  ::protobuf_foxglove_2fLocationFix_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_foxglove_2fLocationFix_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LocationFix& LocationFix::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_foxglove_2fLocationFix_2eproto::scc_info_LocationFix.base);
  return *internal_default_instance();
}


void LocationFix::Clear() {
// @@protoc_insertion_point(message_clear_start:foxglove.LocationFix)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  position_covariance_.Clear();
  ::memset(&latitude_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&position_covariance_type_) -
      reinterpret_cast<char*>(&latitude_)) + sizeof(position_covariance_type_));
  _internal_metadata_.Clear();
}

bool LocationFix::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:foxglove.LocationFix)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // double latitude = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &latitude_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double longitude = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &longitude_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double altitude = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &altitude_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated double position_covariance = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_position_covariance())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u /* 33 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 34u, input, this->mutable_position_covariance())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .foxglove.LocationFix.PositionCovarianceType position_covariance_type = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_position_covariance_type(static_cast< ::foxglove::LocationFix_PositionCovarianceType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:foxglove.LocationFix)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:foxglove.LocationFix)
  return false;
#undef DO_
}

void LocationFix::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:foxglove.LocationFix)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double latitude = 1;
  if (this->latitude() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->latitude(), output);
  }

  // double longitude = 2;
  if (this->longitude() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->longitude(), output);
  }

  // double altitude = 3;
  if (this->altitude() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->altitude(), output);
  }

  // repeated double position_covariance = 4;
  if (this->position_covariance_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(4, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _position_covariance_cached_byte_size_));
    ::google::protobuf::internal::WireFormatLite::WriteDoubleArray(
      this->position_covariance().data(), this->position_covariance_size(), output);
  }

  // .foxglove.LocationFix.PositionCovarianceType position_covariance_type = 5;
  if (this->position_covariance_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->position_covariance_type(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:foxglove.LocationFix)
}

::google::protobuf::uint8* LocationFix::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:foxglove.LocationFix)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double latitude = 1;
  if (this->latitude() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->latitude(), target);
  }

  // double longitude = 2;
  if (this->longitude() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->longitude(), target);
  }

  // double altitude = 3;
  if (this->altitude() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->altitude(), target);
  }

  // repeated double position_covariance = 4;
  if (this->position_covariance_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      4,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _position_covariance_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleNoTagToArray(this->position_covariance_, target);
  }

  // .foxglove.LocationFix.PositionCovarianceType position_covariance_type = 5;
  if (this->position_covariance_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->position_covariance_type(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:foxglove.LocationFix)
  return target;
}

size_t LocationFix::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:foxglove.LocationFix)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated double position_covariance = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->position_covariance_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _position_covariance_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // double latitude = 1;
  if (this->latitude() != 0) {
    total_size += 1 + 8;
  }

  // double longitude = 2;
  if (this->longitude() != 0) {
    total_size += 1 + 8;
  }

  // double altitude = 3;
  if (this->altitude() != 0) {
    total_size += 1 + 8;
  }

  // .foxglove.LocationFix.PositionCovarianceType position_covariance_type = 5;
  if (this->position_covariance_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->position_covariance_type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LocationFix::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:foxglove.LocationFix)
  GOOGLE_DCHECK_NE(&from, this);
  const LocationFix* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LocationFix>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:foxglove.LocationFix)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:foxglove.LocationFix)
    MergeFrom(*source);
  }
}

void LocationFix::MergeFrom(const LocationFix& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:foxglove.LocationFix)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  position_covariance_.MergeFrom(from.position_covariance_);
  if (from.latitude() != 0) {
    set_latitude(from.latitude());
  }
  if (from.longitude() != 0) {
    set_longitude(from.longitude());
  }
  if (from.altitude() != 0) {
    set_altitude(from.altitude());
  }
  if (from.position_covariance_type() != 0) {
    set_position_covariance_type(from.position_covariance_type());
  }
}

void LocationFix::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:foxglove.LocationFix)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LocationFix::CopyFrom(const LocationFix& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:foxglove.LocationFix)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LocationFix::IsInitialized() const {
  return true;
}

void LocationFix::Swap(LocationFix* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LocationFix::InternalSwap(LocationFix* other) {
  using std::swap;
  position_covariance_.InternalSwap(&other->position_covariance_);
  swap(latitude_, other->latitude_);
  swap(longitude_, other->longitude_);
  swap(altitude_, other->altitude_);
  swap(position_covariance_type_, other->position_covariance_type_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata LocationFix::GetMetadata() const {
  protobuf_foxglove_2fLocationFix_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_foxglove_2fLocationFix_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace foxglove
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::foxglove::LocationFix* Arena::CreateMaybeMessage< ::foxglove::LocationFix >(Arena* arena) {
  return Arena::CreateInternal< ::foxglove::LocationFix >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
